page 150 (175 of 370) before There's a balance between a more ...
Chapter 10

1. The unstructured data in NoSQL databases isn't stored in tables of rows and columns;
rather, it's stored in dynamic arrays that allow you to add new properties for an item
as needed.

2. Xingyuan, happy to read more from this book's angle about NoSQL DB.

3. This chapter uses an SQL model for Cosmos DB, but the data is stored in a NoSQL JSON
format.  These may be new concepts, but stick with me.  You can use other models, 
including Mongo, Cassandra, Gremlin, and Table.  The functionality is the same for all
of them: pick your model, choose your regions, and add your data.  That's the power of 
Cosmos DB.

4. When your application makes a connection to a Cosmos DB database, you can specify
a connection policy.  If database aren't normally your thing, think of a basic Open
Database Connectivity (ODBC) connection you may create on a Windows machine.  The connection
string typically defines a hostname, a database name, a port, and credentials.  
Cosmos DB is no different.  You can connect to Cosmos DB from multiple languages, 
including .NET, Python, Node.js, and Java.  The languages may differ, but all
the SDKs have a similar setting: endpoint discovery.  

5. xingyuan: the key step to config webapp to connect to Cosmos DB is:
Edit the configuration file in the app code repo,
with the database URI and access key that you copied from your Cosmos DB key menu,
to do this, the code is:
nano config.js

